{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shaik Tahira Farheen\\\\Desktop\\\\project\\\\client\\\\src\\\\components\\\\FormulaBar.js\",\n  _s = $RefreshSig$();\n// In FormulaBar.js\nimport React, { useState, useEffect } from \"react\";\nimport { evaluateFormula } from \"./utils/formulaUtils\"; // Correct import path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FormulaBar({\n  formula,\n  setFormula,\n  grid,\n  setGrid,\n  currentCell\n}) {\n  _s();\n  const [cellValue, setCellValue] = useState(\"\");\n  useEffect(() => {\n    const {\n      row,\n      col\n    } = currentCell;\n    setCellValue(grid[row][col]);\n  }, [currentCell, grid]);\n  const handleFormulaChange = e => {\n    setFormula(e.target.value);\n  };\n  const applyFormula = () => {\n    const {\n      row,\n      col\n    } = currentCell;\n    const newGrid = [...grid];\n    newGrid[row][col] = evaluateFormula(formula, grid); // Use the formula evaluation function\n    setGrid(newGrid);\n    setFormula(\"\"); // Clear formula bar after applying\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: \"10px\",\n      padding: \"10px\",\n      backgroundColor: \"#f1f1f1\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: formula || cellValue,\n      onChange: handleFormulaChange,\n      placeholder: \"Enter formula (e.g., =SUM(A1:A5))\",\n      style: {\n        width: \"100%\",\n        padding: \"5px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: applyFormula,\n      children: \"Apply\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(FormulaBar, \"CkFTzb1GlusxqEUwjIyWNLuHbmk=\");\n_c = FormulaBar;\nexport default FormulaBar;\nvar _c;\n$RefreshReg$(_c, \"FormulaBar\");","map":{"version":3,"names":["React","useState","useEffect","evaluateFormula","jsxDEV","_jsxDEV","FormulaBar","formula","setFormula","grid","setGrid","currentCell","_s","cellValue","setCellValue","row","col","handleFormulaChange","e","target","value","applyFormula","newGrid","style","marginBottom","padding","backgroundColor","children","type","onChange","placeholder","width","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Shaik Tahira Farheen/Desktop/project/client/src/components/FormulaBar.js"],"sourcesContent":["// In FormulaBar.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { evaluateFormula } from \"./utils/formulaUtils\"; // Correct import path\r\n\r\nfunction FormulaBar({ formula, setFormula, grid, setGrid, currentCell }) {\r\n  const [cellValue, setCellValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const { row, col } = currentCell;\r\n    setCellValue(grid[row][col]);\r\n  }, [currentCell, grid]);\r\n\r\n  const handleFormulaChange = (e) => {\r\n    setFormula(e.target.value);\r\n  };\r\n\r\n  const applyFormula = () => {\r\n    const { row, col } = currentCell;\r\n    const newGrid = [...grid];\r\n    newGrid[row][col] = evaluateFormula(formula, grid); // Use the formula evaluation function\r\n    setGrid(newGrid);\r\n    setFormula(\"\"); // Clear formula bar after applying\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: \"10px\", padding: \"10px\", backgroundColor: \"#f1f1f1\" }}>\r\n      <input\r\n        type=\"text\"\r\n        value={formula || cellValue}\r\n        onChange={handleFormulaChange}\r\n        placeholder=\"Enter formula (e.g., =SUM(A1:A5))\"\r\n        style={{ width: \"100%\", padding: \"5px\" }}\r\n      />\r\n      <button onClick={applyFormula}>Apply</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormulaBar;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExD,SAASC,UAAUA,CAAC;EAAEC,OAAO;EAAEC,UAAU;EAAEC,IAAI;EAAEC,OAAO;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACvE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAM;MAAEa,GAAG;MAAEC;IAAI,CAAC,GAAGL,WAAW;IAChCG,YAAY,CAACL,IAAI,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACL,WAAW,EAAEF,IAAI,CAAC,CAAC;EAEvB,MAAMQ,mBAAmB,GAAIC,CAAC,IAAK;IACjCV,UAAU,CAACU,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAM;MAAEN,GAAG;MAAEC;IAAI,CAAC,GAAGL,WAAW;IAChC,MAAMW,OAAO,GAAG,CAAC,GAAGb,IAAI,CAAC;IACzBa,OAAO,CAACP,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGb,eAAe,CAACI,OAAO,EAAEE,IAAI,CAAC,CAAC,CAAC;IACpDC,OAAO,CAACY,OAAO,CAAC;IAChBd,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;EAClB,CAAC;EAED,oBACEH,OAAA;IAAKkB,KAAK,EAAE;MAAEC,YAAY,EAAE,MAAM;MAAEC,OAAO,EAAE,MAAM;MAAEC,eAAe,EAAE;IAAU,CAAE;IAAAC,QAAA,gBAChFtB,OAAA;MACEuB,IAAI,EAAC,MAAM;MACXR,KAAK,EAAEb,OAAO,IAAIM,SAAU;MAC5BgB,QAAQ,EAAEZ,mBAAoB;MAC9Ba,WAAW,EAAC,mCAAmC;MAC/CP,KAAK,EAAE;QAAEQ,KAAK,EAAE,MAAM;QAAEN,OAAO,EAAE;MAAM;IAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,eACF9B,OAAA;MAAQ+B,OAAO,EAAEf,YAAa;MAAAM,QAAA,EAAC;IAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV;AAACvB,EAAA,CAhCQN,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAkCnB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}