{"ast":null,"code":"import React,{useState}from'react';import{sum,average,max,min,count}from'/utils/formulaUtils';// Import formula utilities\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Toolbar=_ref=>{let{onAddRow,onAddColumn,onApplyFunction,selectedCells}=_ref;const[functionName,setFunctionName]=useState('');// Handle applying a function to the selected cells\nconst handleFunctionApply=()=>{if(!selectedCells||selectedCells.length===0)return;let data=selectedCells.map(cell=>parseFloat(cell.value)).filter(val=>!isNaN(val));if(data.length===0)return;let result=0;switch(functionName){case'SUM':result=sum(data);break;case'AVERAGE':result=average(data);break;case'MAX':result=max(data);break;case'MIN':result=min(data);break;case'COUNT':result=count(data);break;default:return;}onApplyFunction(result);// Callback to update the spreadsheet with the result\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"toolbar\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:onAddRow,children:\"Add Row\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onAddColumn,children:\"Add Column\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"function-controls\",children:[/*#__PURE__*/_jsxs(\"select\",{onChange:e=>setFunctionName(e.target.value),value:functionName,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Function\"}),/*#__PURE__*/_jsx(\"option\",{value:\"SUM\",children:\"SUM\"}),/*#__PURE__*/_jsx(\"option\",{value:\"AVERAGE\",children:\"AVERAGE\"}),/*#__PURE__*/_jsx(\"option\",{value:\"MAX\",children:\"MAX\"}),/*#__PURE__*/_jsx(\"option\",{value:\"MIN\",children:\"MIN\"}),/*#__PURE__*/_jsx(\"option\",{value:\"COUNT\",children:\"COUNT\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleFunctionApply,children:\"Apply Function\"})]})]});};export default Toolbar;","map":{"version":3,"names":["React","useState","sum","average","max","min","count","jsx","_jsx","jsxs","_jsxs","Toolbar","_ref","onAddRow","onAddColumn","onApplyFunction","selectedCells","functionName","setFunctionName","handleFunctionApply","length","data","map","cell","parseFloat","value","filter","val","isNaN","result","className","children","onClick","onChange","e","target"],"sources":["C:/Users/Shaik Tahira Farheen/Desktop/project/client/src/components/Toolbar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { sum, average, max, min, count } from '/utils/formulaUtils';  // Import formula utilities\r\n\r\nconst Toolbar = ({ onAddRow, onAddColumn, onApplyFunction, selectedCells }) => {\r\n  const [functionName, setFunctionName] = useState('');\r\n\r\n  // Handle applying a function to the selected cells\r\n  const handleFunctionApply = () => {\r\n    if (!selectedCells || selectedCells.length === 0) return;\r\n\r\n    let data = selectedCells.map(cell => parseFloat(cell.value)).filter(val => !isNaN(val));\r\n\r\n    if (data.length === 0) return;\r\n\r\n    let result = 0;\r\n    switch (functionName) {\r\n      case 'SUM':\r\n        result = sum(data);\r\n        break;\r\n      case 'AVERAGE':\r\n        result = average(data);\r\n        break;\r\n      case 'MAX':\r\n        result = max(data);\r\n        break;\r\n      case 'MIN':\r\n        result = min(data);\r\n        break;\r\n      case 'COUNT':\r\n        result = count(data);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    onApplyFunction(result);  // Callback to update the spreadsheet with the result\r\n  };\r\n\r\n  return (\r\n    <div className=\"toolbar\">\r\n      <button onClick={onAddRow}>Add Row</button>\r\n      <button onClick={onAddColumn}>Add Column</button>\r\n      \r\n      <div className=\"function-controls\">\r\n        <select onChange={(e) => setFunctionName(e.target.value)} value={functionName}>\r\n          <option value=\"\">Select Function</option>\r\n          <option value=\"SUM\">SUM</option>\r\n          <option value=\"AVERAGE\">AVERAGE</option>\r\n          <option value=\"MAX\">MAX</option>\r\n          <option value=\"MIN\">MIN</option>\r\n          <option value=\"COUNT\">COUNT</option>\r\n        </select>\r\n        <button onClick={handleFunctionApply}>Apply Function</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toolbar;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,GAAG,CAAEC,OAAO,CAAEC,GAAG,CAAEC,GAAG,CAAEC,KAAK,KAAQ,qBAAqB,CAAG;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEtE,KAAM,CAAAC,OAAO,CAAGC,IAAA,EAA+D,IAA9D,CAAEC,QAAQ,CAAEC,WAAW,CAAEC,eAAe,CAAEC,aAAc,CAAC,CAAAJ,IAAA,CACxE,KAAM,CAACK,YAAY,CAAEC,eAAe,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAEpD;AACA,KAAM,CAAAkB,mBAAmB,CAAGA,CAAA,GAAM,CAChC,GAAI,CAACH,aAAa,EAAIA,aAAa,CAACI,MAAM,GAAK,CAAC,CAAE,OAElD,GAAI,CAAAC,IAAI,CAAGL,aAAa,CAACM,GAAG,CAACC,IAAI,EAAIC,UAAU,CAACD,IAAI,CAACE,KAAK,CAAC,CAAC,CAACC,MAAM,CAACC,GAAG,EAAI,CAACC,KAAK,CAACD,GAAG,CAAC,CAAC,CAEvF,GAAIN,IAAI,CAACD,MAAM,GAAK,CAAC,CAAE,OAEvB,GAAI,CAAAS,MAAM,CAAG,CAAC,CACd,OAAQZ,YAAY,EAClB,IAAK,KAAK,CACRY,MAAM,CAAG3B,GAAG,CAACmB,IAAI,CAAC,CAClB,MACF,IAAK,SAAS,CACZQ,MAAM,CAAG1B,OAAO,CAACkB,IAAI,CAAC,CACtB,MACF,IAAK,KAAK,CACRQ,MAAM,CAAGzB,GAAG,CAACiB,IAAI,CAAC,CAClB,MACF,IAAK,KAAK,CACRQ,MAAM,CAAGxB,GAAG,CAACgB,IAAI,CAAC,CAClB,MACF,IAAK,OAAO,CACVQ,MAAM,CAAGvB,KAAK,CAACe,IAAI,CAAC,CACpB,MACF,QACE,OACJ,CAEAN,eAAe,CAACc,MAAM,CAAC,CAAG;AAC5B,CAAC,CAED,mBACEnB,KAAA,QAAKoB,SAAS,CAAC,SAAS,CAAAC,QAAA,eACtBvB,IAAA,WAAQwB,OAAO,CAAEnB,QAAS,CAAAkB,QAAA,CAAC,SAAO,CAAQ,CAAC,cAC3CvB,IAAA,WAAQwB,OAAO,CAAElB,WAAY,CAAAiB,QAAA,CAAC,YAAU,CAAQ,CAAC,cAEjDrB,KAAA,QAAKoB,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChCrB,KAAA,WAAQuB,QAAQ,CAAGC,CAAC,EAAKhB,eAAe,CAACgB,CAAC,CAACC,MAAM,CAACV,KAAK,CAAE,CAACA,KAAK,CAAER,YAAa,CAAAc,QAAA,eAC5EvB,IAAA,WAAQiB,KAAK,CAAC,EAAE,CAAAM,QAAA,CAAC,iBAAe,CAAQ,CAAC,cACzCvB,IAAA,WAAQiB,KAAK,CAAC,KAAK,CAAAM,QAAA,CAAC,KAAG,CAAQ,CAAC,cAChCvB,IAAA,WAAQiB,KAAK,CAAC,SAAS,CAAAM,QAAA,CAAC,SAAO,CAAQ,CAAC,cACxCvB,IAAA,WAAQiB,KAAK,CAAC,KAAK,CAAAM,QAAA,CAAC,KAAG,CAAQ,CAAC,cAChCvB,IAAA,WAAQiB,KAAK,CAAC,KAAK,CAAAM,QAAA,CAAC,KAAG,CAAQ,CAAC,cAChCvB,IAAA,WAAQiB,KAAK,CAAC,OAAO,CAAAM,QAAA,CAAC,OAAK,CAAQ,CAAC,EAC9B,CAAC,cACTvB,IAAA,WAAQwB,OAAO,CAAEb,mBAAoB,CAAAY,QAAA,CAAC,gBAAc,CAAQ,CAAC,EAC1D,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAApB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}